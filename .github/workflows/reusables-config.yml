name: 'Configuration Files Quality Checks'

on:
  workflow_call:
    secrets:
      CHECKER_TOKEN:
        description: 'The GITHUB_TOKEN passed from the caller'
        required: true
    outputs:
      yaml-status:
        description: "The status of the YAML validation."
        value: ${{ jobs.check-yaml.outputs.status }}
      yaml-summary:
        description: "The summary of the YAML validation."
        value: ${{ jobs.check-yaml.outputs.summary }}
      json-status:
        description: "The status of the JSON validation."
        value: ${{ jobs.check-json.outputs.status }}
      json-summary:
        description: "The summary of the JSON validation."
        value: ${{ jobs.check-json.outputs.summary }}
      toml-status:
        description: "The status of the TOML validation."
        value: ${{ jobs.check-toml.outputs.status }}
      toml-summary:
        description: "The summary of the TOML validation."
        value: ${{ jobs.check-toml.outputs.summary }}

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-yaml:
    name: 'Check YAML Files'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
      summary: ${{ steps.check.outputs.summary }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install uv
        id: setup_uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install yamllint
        run: |
          uv pip install yamllint

      - name: Find and Check YAML Files
        id: check
        run: |
          # Find all YAML files (*.yml, *.yaml) excluding node_modules and .git
          YAML_FILES=$(find . -type f \( -name "*.yml" -o -name "*.yaml" \) \
            ! -path "*/node_modules/*" \
            ! -path "*/.git/*" \
            ! -path "*/venv/*" \
            ! -path "*/.venv/*" \
            2>/dev/null || true)

          if [ -z "$YAML_FILES" ]; then
            MESSAGE="⚠️ **YAML Files:** No YAML files found to check"
            STATUS="success"
          else
            FILE_COUNT=$(echo "$YAML_FILES" | wc -l)
            
            # Run yamllint with relaxed configuration
            set +e
            YAMLLINT_OUTPUT=$(echo "$YAML_FILES" | xargs uv run yamllint -f parsable 2>&1)
            YAMLLINT_EXIT=$?
            set -e

            if [ $YAMLLINT_EXIT -eq 0 ]; then
              MESSAGE="✅ **YAML Files:** All $FILE_COUNT file(s) passed validation"
              STATUS="success"
            else
              # Count failed files
              FAILED_COUNT=$(echo "$YAMLLINT_OUTPUT" | cut -d':' -f1 | sort -u | wc -l)
              # Get first failed file for summary
              FIRST_FAILED=$(echo "$YAMLLINT_OUTPUT" | head -n 1 | cut -d':' -f1)
              
              MESSAGE="❌ **YAML Files:** Found issues in $FAILED_COUNT of $FILE_COUNT file(s) (e.g., \`$FIRST_FAILED\`)"
              STATUS="failure"
              
              # Show first few errors in GitHub annotations
              echo "$YAMLLINT_OUTPUT" | head -n 10 | while IFS=: read -r file line col level msg; do
                if [ -n "$file" ] && [ -n "$line" ]; then
                  echo "::error file=${file},line=${line},col=${col}::${msg}"
                fi
              done
            fi
          fi

          {
            echo "status=$STATUS"
            echo "summary=$MESSAGE"
          } >> "$GITHUB_OUTPUT"

  check-json:
    name: 'Check JSON Files'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
      summary: ${{ steps.check.outputs.summary }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install jq
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq

      - name: Find and Check JSON Files
        id: check
        run: |
          # Find all JSON files excluding node_modules and .git
          JSON_FILES=$(find . -type f -name "*.json" \
            ! -path "*/node_modules/*" \
            ! -path "*/.git/*" \
            ! -path "*/venv/*" \
            ! -path "*/.venv/*" \
            ! -path "*/.next/*" \
            ! -path "*/dist/*" \
            ! -path "*/build/*" \
            2>/dev/null || true)

          if [ -z "$JSON_FILES" ]; then
            MESSAGE="⚠️ **JSON Files:** No JSON files found to check"
            STATUS="success"
          else
            FILE_COUNT=$(echo "$JSON_FILES" | wc -l)
            FAILED_FILES=""
            FAILED_COUNT=0

            # Check each JSON file
            while IFS= read -r file; do
              if ! jq empty "$file" >/dev/null 2>&1; then
                FAILED_COUNT=$((FAILED_COUNT + 1))
                if [ -z "$FAILED_FILES" ]; then
                  FAILED_FILES="$file"
                fi
                # Get error details
                ERROR_MSG=$(jq empty "$file" 2>&1 || true)
                echo "::error file=${file}::JSON validation failed: ${ERROR_MSG}"
              fi
            done <<< "$JSON_FILES"

            if [ $FAILED_COUNT -eq 0 ]; then
              MESSAGE="✅ **JSON Files:** All $FILE_COUNT file(s) are valid"
              STATUS="success"
            else
              MESSAGE="❌ **JSON Files:** $FAILED_COUNT of $FILE_COUNT file(s) failed validation (e.g., \`$FAILED_FILES\`)"
              STATUS="failure"
            fi
          fi

          {
            echo "status=$STATUS"
            echo "summary=$MESSAGE"
          } >> "$GITHUB_OUTPUT"

  check-toml:
    name: 'Check TOML Files'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
      summary: ${{ steps.check.outputs.summary }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install taplo-cli
        run: |
          # Install taplo using the official installation script
          curl -fsSL https://github.com/tamasfe/taplo/releases/latest/download/taplo-full-linux-x86_64.gz \
            | gzip -d - | install -m 755 /dev/stdin /usr/local/bin/taplo

      - name: Find and Check TOML Files
        id: check
        run: |
          # Find all TOML files excluding node_modules and .git
          TOML_FILES=$(find . -type f -name "*.toml" \
            ! -path "*/node_modules/*" \
            ! -path "*/.git/*" \
            ! -path "*/venv/*" \
            ! -path "*/.venv/*" \
            2>/dev/null || true)

          if [ -z "$TOML_FILES" ]; then
            MESSAGE="⚠️ **TOML Files:** No TOML files found to check"
            STATUS="success"
          else
            FILE_COUNT=$(echo "$TOML_FILES" | wc -l)
            
            # Run taplo check
            set +e
            TAPLO_OUTPUT=$(echo "$TOML_FILES" | xargs taplo check 2>&1)
            TAPLO_EXIT=$?
            set -e

            if [ $TAPLO_EXIT -eq 0 ]; then
              MESSAGE="✅ **TOML Files:** All $FILE_COUNT file(s) are valid"
              STATUS="success"
            else
              # Extract failed files from taplo output
              FAILED_FILES=$(echo "$TAPLO_OUTPUT" | grep -oP '(?<=")[^"]+\.toml(?=")' | head -n 1 || echo "unknown")
              FAILED_COUNT=$(echo "$TAPLO_OUTPUT" | grep -c "error" || echo "1")
              
              MESSAGE="❌ **TOML Files:** Found syntax errors in TOML files (e.g., \`$FAILED_FILES\`)"
              STATUS="failure"
              
              # Show errors as GitHub annotations
              echo "$TAPLO_OUTPUT" | grep "error" | head -n 10 | while IFS= read -r line; do
                echo "::error::TOML: ${line}"
              done
            fi
          fi

          {
            echo "status=$STATUS"
            echo "summary=$MESSAGE"
          } >> "$GITHUB_OUTPUT"

