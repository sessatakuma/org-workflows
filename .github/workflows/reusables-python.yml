name: 'Python Code Quality Checks'

on:
  workflow_call:
    inputs:
      python-version:
        description: 'The Python version to use'
        required: false
        type: string
        default: '3.11'
    secrets:
      CHECKER_TOKEN:
        description: 'The GITHUB_TOKEN passed from the caller'
        required: true
    outputs:
      python-summary:
        description: "A summary of the Python code quality checks."
        value: ${{ jobs.check-python-code.outputs.summary }}
      python-status:
        description: "The overall status of the Python checks."
        value: ${{ jobs.check-python-code.outputs.status }}

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  check-python-code:
    name: 'Python Quality Checks'
    runs-on: ubuntu-latest
    outputs:
      summary: ${{ steps.outcome.outputs.summary }}
      status: ${{ steps.outcome.outputs.status }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }} 

      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Dependencies and Linters
        run: |
          uv sync
            
      - name: Check Ruff Formatter
        id: ruff_format
        continue-on-error: true
        run: |
          echo "Running ruff format check..."
          uv run ruff format . --check --output-format=github

      - name: Check Ruff Linter (with Annotations)
        id: ruff_lint
        continue-on-error: true
        run: |
          echo "Running ruff check with GitHub annotations..."
          uv run ruff check . --output-format=github

      - name: Check Mypy (with Annotations)
        id: mypy_check
        continue-on-error: true
        run: |
          echo "Running mypy with GitHub annotations..."
          set +e  # Don't exit on mypy failure
          uv run mypy . > mypy_output.txt 2>&1
          MYPY_EXIT_CODE=$?

          if [ -f mypy_output.txt ]; then
            sed -i -E 's/^([^:]+:[0-9]+):[[:space:]]+(error|warning|note):/\1:: \2:/' mypy_output.txt
          fi
          
          # Parse mypy output and generate GitHub annotations
          if [ -f mypy_output.txt ]; then
            while IFS= read -r line; do
              # Match pattern: file.py:line:column: error_type: message
              if echo "$line" | grep -qE '^[^:]+:[0-9]+:[0-9]*:'; then
                # Extract file, line, column, error type, and message
                file=$(echo "$line" | cut -d':' -f1)
                line_num=$(echo "$line" | cut -d':' -f2)
                col_num=$(echo "$line" | cut -d':' -f3)
                rest=$(echo "$line" | cut -d':' -f4-)
                
                # Extract error type (error, warning, note) and message
                error_type=$(echo "$rest" | sed -E 's/^[[:space:]]*(error|warning|note):.*/\1/')
                message=$(echo "$rest" | sed -E 's/^[[:space:]]*(error|warning|note):[[:space:]]*//')
                
                # Determine annotation level
                case "$error_type" in
                  error) level="error" ;;
                  warning) level="warning" ;;
                  note) level="notice" ;;
                  *) level="error" ;;
                esac
                
                # Generate GitHub annotation
                if [ -n "$col_num" ] && [ "$col_num" != " " ]; then
                  echo "::${level} title=Mypy (${error_type}),file=${file},line=${line_num},col=${col_num}::${file}:${line_num}:${col_num}: ${error_type}: ${message}"
                else
                  echo "::${level} title=Mypy (${error_type}),file=${file},line=${line_num}::${file}:${line_num}: ${error_type}: ${message}"
                fi
              fi
            done < mypy_output.txt
          fi
          
          # Exit with mypy's original exit code
          exit $MYPY_EXIT_CODE
  
      - name: Set Python Checks Outcome
        id: outcome
        if: always()
        run: |
          if [[ "${{ steps.ruff_format.outcome }}" == "failure" || "${{ steps.ruff_lint.outcome }}" == "failure" || "${{ steps.mypy_check.outcome }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "summary=❌ **Python Quality:** Checks failed (see annotations for details)." >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "summary=✅ **Python Quality:** All checks passed." >> $GITHUB_OUTPUT
          fi